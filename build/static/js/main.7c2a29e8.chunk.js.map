{"version":3,"sources":["person.png","components/TabButton.jsx","components/avatar.jsx","components/topbar.jsx","components/modals/choice.js","redux/actions/userActions.js","redux/types.js","components/modals/outcome.js","components/screens/home.js","components/screens/time.js","components/screens/assets.js","components/screens/debts.js","components/screens/skills.js","components/modals/buyShares.js","components/modals/sellShares.js","components/modals/holdShares.js","components/screens/invests.js","components/screen.jsx","components/screens/chooseCareer.js","App.js","serviceWorker.js","redux/reducers/userReducer.js","redux/reducers/uiReducer.js","redux/store.js","index.js","gameInfo/careers.js","gameInfo/events.js"],"names":["module","exports","classNames","require","TabButton","props","className","tab","Avatar","src","MyPhoto","TopBar","user","useSelector","state","savingsGoal","percentToGoal","investments","savings","id","debts","length","total","calculatedDebts","spirit","salary","shareSplit","setting","onClick","setScreen","Choice","dispatch","useDispatch","branch","events","eventIndex","branches","title","description","type","choices","map","choice","index","event","outcome","payload","asset","cash","makeChoice","console","log","performChoice","key","Outcome","lastChoice","Home","roundType","Time","Assets","Debts","debt","name","interestRate","Skills","BuyShares","max","min","defaultValue","onChange","e","amount","target","value","changeSlider","SellShares","sharesToSell","HoldShares","Invests","useState","buySell","setBuySell","data","pv","history","shares","amountSpent","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","stroke","activeDot","r","ToggleButtonGroup","switch","handleAlignment","ToggleButton","variant","sharesControl","Screen","screen","renderScreen","ChooseCareer","chosenCareer","setChosenCareer","careers","careerDetails","setCareerDetails","htmlFor","find","career","label","salaries","selectCareer","App","screenOn","setScreenOn","setOldScreenOn","years","setYears","switchScreen","screenName","unit","disabled","Boolean","window","location","hostname","match","initialState","skills","types","assets","monthlyExpense","percentageExpense","elementsLoading","middleware","thunk","reducers","combineReducers","action","push","item","info","invests","skill","Math","newChange","i","payExpenses","myValue","currValue","newIncome","addFromSale","sharesAdd","prev","newAssets","undefined","concat","UI","store","__REDUX_DEVTOOLS_EXTENSION__","createStore","compose","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","certification","requiredCertification","required"],"mappings":"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","file":"static/js/main.7c2a29e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/person.50b4fd3e.png\";","import React, { useState } from 'react';\n\nimport '../styles/_tabbutton.css';\nlet classNames = require('classnames');\n\nexport default function TabButton(props) {\n\n  return (\n    <button \n      {...props}\n      className={classNames(\"tab-button\", props.className)}>\n        {props.tab}\n    </button>\n  )\n}\n\n\n// const classes = classNames(\n//   {\"buttonRight\":props.rightButton},\n//   {\"homeButton\":props.homeButton},\n//   props.myCSS)\n\n// //const classesNav = classNamesNav({\"buttonNav\":true},{\"time\":props.myCSS==='time'}, {\"skills\":props.myCSS===\"skills\"}, {\"savings\":props.myCSS===\"savings\"},{\"investments\":props.myCSS===\"investments\"},{\"inventory\":props.myCSS===\"inventory\"});\n\n// if (props.countTime) {\n//   return (\n//     <div className = 'rightalign'>\n\n//       <p>You clicked {props.myCount} times</p>\n//       <button onClick={props.handleFunc } className= {classes} >\n//         Click me\n//       </button>\n//     </div>\n//   );\n// }\n// else{\n// return (\n//   <div className = 'rightalign'>\n\n//     <button onClick={props.handleFunc}className = {classes} >\n        \n//     </button>\n//   </div>\n// );\n// }","import React, { useState } from 'react';\n\nimport MyPhoto from \"../person.png\";\n\nimport '../styles/_avatar.css';\n\nfunction Avatar(props) {\n    return (\n      <div className=\"avatar-container\">\n        <img className=\"avatar-image\" src={MyPhoto} />\n      </div>\n    );\n}\n\nexport default Avatar;","import React from 'react';\nimport TabButton from './TabButton';\nimport { useSelector } from 'react-redux';\n\nimport '../styles/_topbar.css';\nimport Avatar from './avatar';\n\nexport default function TopBar(props) {\n  const user = useSelector(state => state.user);\n\n  let savingsGoal = user.savingsGoal;\n  let percentToGoal = user.investments ? savingsGoal/user.investments.savings : \"MISSING\"; \n\n  function calculatedDebts () {\n    if (user.debts.length === 0) return 0;\n\n    let total = 0;\n\n    for (let debt of user.debts) {\n      total += debt.total;\n    }\n\n    return total;\n  }\n\n    return (\n      <div id=\"top-bar\">\n        <Avatar />\n        <div className=\"top-bar-element\">\n          Savings Goal: {percentToGoal}%\n        </div>\n        <div className=\"top-bar-element\">\n          Savings: {user.investments && user.investments.savings}\n        </div>\n        <div className=\"top-bar-element\">\n          Debts: {user.debts && calculatedDebts()}\n        </div>\n        <div className=\"top-bar-element\">\n          Spirit: {user.spirit }\n        </div>\n        <div className=\"top-bar-element\">\n          Salary: {user.salary}\n        </div>\n        <div className=\"top-bar-element\">\n          ShareSplit: {user.investments.shareSplit}\n        </div>\n        <div className=\"top-bar-element\">\n          settings: {user.investments.setting}\n        </div>\n        <TabButton tab=\"home\" onClick={() => props.setScreen(\"home\")}/>\n      </div>\n    );\n}","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { events } from '../../gameInfo/events';\nimport { makeChoice } from '../../redux/actions/userActions';\n\nexport default function Choice (props) {\n\n  const dispatch = useDispatch();\n\n  // TODO: Make sure event exists.\n  let event = events[props.eventIndex%events.length];\n\n  // TODO: Pick branch based on possibilites.\n  let branch = event.branches[0];\n\n\n  function performChoice(index) {\n    let choice = branch.choices[index];\n\n    dispatch(makeChoice({\n      event: branch,\n      choice: choice\n    }));  choice:   console.log(choice.outcome);\n    console.log(\"LET OTHER ELEMENTS KNOW CHOICE WAS MADE\");\n  }\n\n  return (\n    <div className=\"choice\">\n      <h4>{branch.title}</h4>\n      <p>{branch.description}</p>\n\n      {\n        branch.type === 'action' &&\n        <div>\n          {\n            branch.choices.map((choice, index) => {\n              return <button \n              onClick={() => performChoice(index)}\n              key={\"choice-button-\" + index}>\n                      {choice.title}\n                    </button>\n            })\n          }\n        </div>\n      }\n    </div>\n  )\n}\n","import {\n    UPDATE_SALARY,\n    UPDATE_SAVINGS,\n    UPDATE_ASSETS,\n    UPDATE_CAREER,\n    UPDATE_INVESTMENTS,\n    UPDATE_SKILLS,\n    UPDATE_SAVINGS_GOAL,\n    UPDATE_ASSETS_DEBTS,\n    UPDATE_SPIRIT,\n    PLAYER_MAKE_CHOICE,\n    FINISH_OUTCOME,\n    SELECT_CAREER,\n    UPDATE_SHARE_SPLIT,\n    UPDATE_INVEST_SETTING,\n    UPDATE_MARK_SHARES_SELL\n} from '../types.js';\n\n\nexport const updateInvestSetting = (amount) => (dispatch) => {\n\n    dispatch({\n        type: UPDATE_INVEST_SETTING,\n        switch: amount,\n    });\n\n}\nexport const updateMarkSharesSell = (amount) => (dispatch) => {\n\n    dispatch({\n        type: UPDATE_MARK_SHARES_SELL,\n        payload: amount,\n    });\n\n}\nexport const updateShareSplit = (amount) => (dispatch) => {\n\n    dispatch({\n        type: UPDATE_SHARE_SPLIT,\n        payload: amount,\n    });\n\n}\nexport const updateSalary = (amount) => (dispatch) => {\n\n    dispatch({\n        type: UPDATE_SALARY,\n        payload: amount,\n    });\n\n}\nexport const updateSkills = (newSkill) => (dispatch) => {\n\n    dispatch({\n        type: UPDATE_SKILLS,\n        skill: newSkill,\n    });\n\n}\nexport const updateSavings = (amount) => (dispatch) => {\n\n    dispatch({\n        type: UPDATE_SAVINGS,\n        payload: amount,\n    });\n\n}\nexport const updateSavingsGoal = (amount) => (dispatch) => {\n\n    dispatch({\n        type: UPDATE_SAVINGS_GOAL,\n        payload: amount,\n    });\n\n}\nexport const updateAssetsDebts = () => (dispatch) => {\n\n    dispatch({\n        type: UPDATE_ASSETS_DEBTS,\n    });\n\n}\nexport const updateAssets = (newItem) => (dispatch) => {\n\n    dispatch({\n        type: UPDATE_ASSETS,\n        item: newItem,\n    });\n\n}\nexport const updateCareer = (job) => (dispatch) => {\n\n    dispatch({\n        type: UPDATE_CAREER,\n        info: job,\n    });\n\n}\nexport const updateInvestments= (invests) => (dispatch) => {\n\n    dispatch({\n        type: UPDATE_INVESTMENTS,\n        stocks: invests,\n    });\n\n}\n\nexport const makeChoice=({event, choice}) => (dispatch) => {\n\n    // TODO: Validate choice;\n\n    let outcome = choice.outcome;\n\n    outcome.spirit && dispatch({\n        type: UPDATE_SPIRIT,\n        payload: outcome.spirit,\n    });\n/*\n    outcome.cash && dispatch({\n        \n        type: UPDATE_SAVINGS,\n        payload: outcome.cash,\n    });\n    */\n    outcome.asset && dispatch({\n        type: UPDATE_SAVINGS,\n        asset: outcome.asset,\n    });\n    dispatch({\n        type: PLAYER_MAKE_CHOICE,\n        event: event,\n        choice: choice,\n        payload: outcome.cash,\n    });\n}\n\nexport const finishOutcome = () => (dispatch) => {\n    dispatch({\n        type: FINISH_OUTCOME,\n    })\n}\n\nexport const selectCareer = (careerDetails) => (dispatch) => {\n    dispatch({\n        type: SELECT_CAREER,\n        payload: careerDetails\n    });\n}","export const UPDATE_SALARY = \"UPDATE_SALARY\";\nexport const UPDATE_SAVINGS = \"UPDATE_SAVINGS\";\nexport const UPDATE_SAVINGS_GOAL = \"UPDATE_SAVINGS_GOAL\";\n\nexport const UPDATE_CAREER = \"UPDATE_CAREER\";\nexport const UPDATE_ASSETS = \"UPDATE_ASSETS\";\nexport const UPDATE_INVESTMENTS = \"UPDATE_INVESTMENTS\";\nexport const UPDATE_SKILLS = \"UPDATE_SKILLS\";\nexport const UPDATE_ASSETS_DEBTS = \"UPDATE_ASSETS_DEBTS\";\nexport const UPDATE_SPIRIT = \"UPDATE_SPIRIT\";\n\nexport const PLAYER_MAKE_CHOICE = \"PLAYER_MAKE_CHOICE\";\n\nexport const FINISH_OUTCOME = \"FINISH_OUTCOME\";\n\nexport const SELECT_CAREER = \"SELECT_CAREER\";\nexport const UPDATE_SHARE_SPLIT = \"UPDATE_SHARE_SPLIT\";\nexport const UPDATE_INVEST_SETTING = \"UPDATE_INVEST_SETTING\";\nexport const UPDATE_MARK_SHARES_SELL = \"UPDATE_MARK_SHARES_SELL\";\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { finishOutcome } from '../../redux/actions/userActions';\n\nexport default function Outcome () {\n\n    const user = useSelector(state => state.user);\n    const dispatch = useDispatch();\n\n    let choice = user.lastChoice;\n    return (\n        <div>\n            <h2>Outcome</h2>\n            <h4>{choice.title}</h4>\n            <h4>{choice.description}</h4>\n\n            <div>You're savings changed by {choice.outcome.cash}</div>\n            <div>You're spirit changed by {choice.outcome.spirit}</div>\n            <p>{choice.outcome.description}</p>\n            <button onClick={() => dispatch(finishOutcome())}>Continue</button>\n        </div>\n    )\n}","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Choice from '../modals/choice';\nimport Outcome from '../modals/outcome';\n\n\nexport default function Home (props) {\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n\tlet assetString =()=>{\n\t\tif (user.assets.length > 0){\n\t\t\tlet i = 0;\n\t\t\tlet fullString = '';\n\t\t\twhile (i < 0){\n\t\t\t\tfullString += \" a\"+ user.assets[i].name + \" \";\n\t\t\t\ti++;\n\t\t\t}\n\t\t\treturn 'some items:' + fullString;\n\t\t}\n\t\telse{\n\t\t\treturn 'nothing.'\n\t\t}\n\t}\n  // Calculation...\n  let visible = true;\n\n  return (\n      <div>\n        {/* You currently own {assetString} */}\n\t\t{\n\t\t\tuser.roundType === \"choice\" ?\n\t\t\t<Choice eventIndex={0 }/> :\n\t\t\t<Outcome />\n\t\t}\n      </div>\n  )\n}\n\n\n\n\n//         if (props.years < 2){\n//             let jobOptions = [\n//                 { value: 80000, label: 'Doctor'  },\n//                 { value: 60000, label: 'Engineer' },\n//                 { value: 50000, label: 'Cow Rancher'},\n//                 { value: 70000, label: 'Sky Diver'},\n//               ];\n\n//               const groupedOptions = [\n//                 {\n//                   label: 'Jobs',\n//                   options: jobOptions,\n//                 },\n\n//               ];\n//               const groupBadgeStyles = {\n//                 backgroundColor: '#EBECF0',\n//                 borderRadius: '2em',\n//                 color: '#172B4D',\n//                 display: 'inline-block',\n//                 fontSize: 12,\n//                 fontWeight: 'normal',\n//                 lineHeight: '1',\n//                 minWidth: 1,\n//                 padding: '0.16666666666667em 0.5em',\n//                 textAlign: 'center',\n//               };\n\t\t\t  \n\n//         let setUps = ['What is your job?','Whats your savings goal?','How much savings do you have?'];\n//         let dropdown;\n//         if (props.years == 0){\n//             dropdown = <Select\n//             defaultValue={jobOptions[1]}\n//             options={jobOptions}\n//             className=\"basic-single\"\n\t\t\t\n//             name=\"jobs\"\n//             onChange={(e)=>{handlemyVal(e)}}\n//           classNamePrefix=\"select\"\n//           />;\n//         }\n\t\t\n//         else{\n//             dropdown = <input \n//             name = {props.name[props.years]}\n//              min=\"1\"max=\"100\" type=\"number\"\n//               style = {{width:\"300px\"}}\n\n//               onChange= {(e)=>{handlemyVal(e.target);}}\n//               />\n//         }\n//         let addButt;\n//         if (activeButton == true){\n//             addButt =             <Button onClick = {()=>{setActiveButton(false);props.handleFunc(props.years,props.setYears,1); values[props.years][1](parseInt(myValue));setOpen(!open);}} variant=\"primary\">Submit</Button>;\n\n//         }\n//         else{\n// addButt= <Button disabled>Submit</Button>;\n//         }\n//         return (\n\n//             <div className=\"center\" >\n\t  \n\t  \n\t \n//             <h1>Setup</h1>\n//             <label>{setUps[props.years]} </label>\n//             <br/>\n//             <p>{values[props.years][0]}</p>\n//             <div className=\"center\">\n//         {dropdown}\n//             </div>\n\t\t\t\n//             <br/><br/>\n\n\t\t\t\n\n// {addButt}            \n//             </div>\n//         );\n//         }\n//         else{\n\n//             return (\n//             <div className=\"center\">\n\n//             <h1>Year {Math.round((props.years-2)/4)}</h1>\n//             <h2>{listOfChoices[currChoice].myStatement}</h2>\n//             <label>{props.choices} </label>\n//             <ToggleButtonGroup vertical type=\"radio\" value={value} name=\"options\" onChange = {handleChange} >\n//             <ToggleButton value={0} onChange= {()=>{myChange(listOfChoices[currChoice].cost[value[0]]); myVar = updateSavings; myVarF = props.setSavings;}}>{listOfChoices[currChoice].options[0]}</ToggleButton>\n//             <ToggleButton value={1} onChange= {()=>{myChange(listOfChoices[currChoice].cost[value[0]]); myVar = updateSavings; myVarF = props.setSavings;}}>{listOfChoices[currChoice].options[1]}</ToggleButton>\n//             <ToggleButton value={2} onChange= {()=>{myChange(listOfChoices[currChoice].cost[value[0]]); myVar =updateSavings; myVarF = props.setSavings;}}>{listOfChoices[currChoice].options[2]}</ToggleButton>\n//             </ToggleButtonGroup>\n//             <br/><br/>\n//             <Button         aria-controls=\"example-collapse-text\"\n//             aria-expanded={open} onClick = {()=>{  if (props.years %2 ==0){setSalButtonC(true);}console.log(\"P\"+stockAddendum);props.handleFunc(myVar,myVarF,listOfChoices[currChoice].cost[value[0]]+parseInt(stockAddendum));props.handleFunc(props.years,props.setYears,1);setCurrChoice(Math.round(Math.random(4))) ;changeListOfStocks(Math.random()*50)}}>Submit</Button>\n//             <p>{props.savings}</p>\n\t\t\t\n\t\t\t\n// {salButton}            \n\t\t\t\n   \n\n//             </div>\n//             );\n//         }\n//     }","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateSalary,updateSavings,updateAssets,updateCareer,updateInvestments,updateSkills,updateAssetsDebts,updateSavingsGoal } from '../../redux/actions/userActions';\n\n\nexport default function Time (props) {\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n\t\n  // Calculation...\n  let visible = true;\n\n  return (\n\t<div className=\"center\">\n\t\tYour time.\n{/* \t  Home. Custom home screen.\n\n\t  <Button \n\t\tvariant=\"success\" \n\t\tdisabled={salButtonC}\n\t\tonClick={()=>{\n\t\t  props.handleFunc(props.savings,props.setSavings,props.salary/4)\n\t\t}}>\n\t\t  Wait to collect salary\n\t  </Button>\n\t */}\n\t</div>\n  )\n}\n\n\n\n\n//         if (props.years < 2){\n//             let jobOptions = [\n//                 { value: 80000, label: 'Doctor'  },\n//                 { value: 60000, label: 'Engineer' },\n//                 { value: 50000, label: 'Cow Rancher'},\n//                 { value: 70000, label: 'Sky Diver'},\n//               ];\n\n//               const groupedOptions = [\n//                 {\n//                   label: 'Jobs',\n//                   options: jobOptions,\n//                 },\n\n//               ];\n//               const groupBadgeStyles = {\n//                 backgroundColor: '#EBECF0',\n//                 borderRadius: '2em',\n//                 color: '#172B4D',\n//                 display: 'inline-block',\n//                 fontSize: 12,\n//                 fontWeight: 'normal',\n//                 lineHeight: '1',\n//                 minWidth: 1,\n//                 padding: '0.16666666666667em 0.5em',\n//                 textAlign: 'center',\n//               };\n\t\t\t  \n\n//         let setUps = ['What is your job?','Whats your savings goal?','How much savings do you have?'];\n//         let dropdown;\n//         if (props.years == 0){\n//             dropdown = <Select\n//             defaultValue={jobOptions[1]}\n//             options={jobOptions}\n//             className=\"basic-single\"\n\t\t\t\n//             name=\"jobs\"\n//             onChange={(e)=>{handlemyVal(e)}}\n//           classNamePrefix=\"select\"\n//           />;\n//         }\n\t\t\n//         else{\n//             dropdown = <input \n//             name = {props.name[props.years]}\n//              min=\"1\"max=\"100\" type=\"number\"\n//               style = {{width:\"300px\"}}\n\n//               onChange= {(e)=>{handlemyVal(e.target);}}\n//               />\n//         }\n//         let addButt;\n//         if (activeButton == true){\n//             addButt =             <Button onClick = {()=>{setActiveButton(false);props.handleFunc(props.years,props.setYears,1); values[props.years][1](parseInt(myValue));setOpen(!open);}} variant=\"primary\">Submit</Button>;\n\n//         }\n//         else{\n// addButt= <Button disabled>Submit</Button>;\n//         }\n//         return (\n\n//             <div className=\"center\" >\n\t  \n\t  \n\t \n//             <h1>Setup</h1>\n//             <label>{setUps[props.years]} </label>\n//             <br/>\n//             <p>{values[props.years][0]}</p>\n//             <div className=\"center\">\n//         {dropdown}\n//             </div>\n\t\t\t\n//             <br/><br/>\n\n\t\t\t\n\n// {addButt}            \n//             </div>\n//         );\n//         }\n//         else{\n\n//             return (\n//             <div className=\"center\">\n\n//             <h1>Year {Math.round((props.years-2)/4)}</h1>\n//             <h2>{listOfChoices[currChoice].myStatement}</h2>\n//             <label>{props.choices} </label>\n//             <ToggleButtonGroup vertical type=\"radio\" value={value} name=\"options\" onChange = {handleChange} >\n//             <ToggleButton value={0} onChange= {()=>{myChange(listOfChoices[currChoice].cost[value[0]]); myVar = updateSavings; myVarF = props.setSavings;}}>{listOfChoices[currChoice].options[0]}</ToggleButton>\n//             <ToggleButton value={1} onChange= {()=>{myChange(listOfChoices[currChoice].cost[value[0]]); myVar = updateSavings; myVarF = props.setSavings;}}>{listOfChoices[currChoice].options[1]}</ToggleButton>\n//             <ToggleButton value={2} onChange= {()=>{myChange(listOfChoices[currChoice].cost[value[0]]); myVar =updateSavings; myVarF = props.setSavings;}}>{listOfChoices[currChoice].options[2]}</ToggleButton>\n//             </ToggleButtonGroup>\n//             <br/><br/>\n//             <Button         aria-controls=\"example-collapse-text\"\n//             aria-expanded={open} onClick = {()=>{  if (props.years %2 ==0){setSalButtonC(true);}console.log(\"P\"+stockAddendum);props.handleFunc(myVar,myVarF,listOfChoices[currChoice].cost[value[0]]+parseInt(stockAddendum));props.handleFunc(props.years,props.setYears,1);setCurrChoice(Math.round(Math.random(4))) ;changeListOfStocks(Math.random()*50)}}>Submit</Button>\n//             <p>{props.savings}</p>\n\t\t\t\n\t\t\t\n// {salButton}            \n\t\t\t\n   \n\n//             </div>\n//             );\n//         }\n//     }","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateSalary,updateSavings,updateAssets,updateCareer,updateInvestments,updateSkills,updateAssetsDebts,updateSavingsGoal } from '../../redux/actions/userActions';\n\n\nexport default function Assets (props) {\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n\n  // Calculation...\n  let visible = true;\n\n  return (\n\t<div className=\"center\">\n\t\tYour assets\n\n{/* \t  Home. Custom home screen.\n\n\t  <Button \n\t\tvariant=\"success\" \n\t\tdisabled={salButtonC}\n\t\tonClick={()=>{\n\t\t  props.handleFunc(props.savings,props.setSavings,props.salary/4)\n\t\t}}>\n\t\t  Wait to collect salary\n\t  </Button>\n\t */}\n\t</div>\n  )\n}\n\n\n\n\n//         if (props.years < 2){\n//             let jobOptions = [\n//                 { value: 80000, label: 'Doctor'  },\n//                 { value: 60000, label: 'Engineer' },\n//                 { value: 50000, label: 'Cow Rancher'},\n//                 { value: 70000, label: 'Sky Diver'},\n//               ];\n\n//               const groupedOptions = [\n//                 {\n//                   label: 'Jobs',\n//                   options: jobOptions,\n//                 },\n\n//               ];\n//               const groupBadgeStyles = {\n//                 backgroundColor: '#EBECF0',\n//                 borderRadius: '2em',\n//                 color: '#172B4D',\n//                 display: 'inline-block',\n//                 fontSize: 12,\n//                 fontWeight: 'normal',\n//                 lineHeight: '1',\n//                 minWidth: 1,\n//                 padding: '0.16666666666667em 0.5em',\n//                 textAlign: 'center',\n//               };\n\t\t\t  \n\n//         let setUps = ['What is your job?','Whats your savings goal?','How much savings do you have?'];\n//         let dropdown;\n//         if (props.years == 0){\n//             dropdown = <Select\n//             defaultValue={jobOptions[1]}\n//             options={jobOptions}\n//             className=\"basic-single\"\n\t\t\t\n//             name=\"jobs\"\n//             onChange={(e)=>{handlemyVal(e)}}\n//           classNamePrefix=\"select\"\n//           />;\n//         }\n\t\t\n//         else{\n//             dropdown = <input \n//             name = {props.name[props.years]}\n//              min=\"1\"max=\"100\" type=\"number\"\n//               style = {{width:\"300px\"}}\n\n//               onChange= {(e)=>{handlemyVal(e.target);}}\n//               />\n//         }\n//         let addButt;\n//         if (activeButton == true){\n//             addButt =             <Button onClick = {()=>{setActiveButton(false);props.handleFunc(props.years,props.setYears,1); values[props.years][1](parseInt(myValue));setOpen(!open);}} variant=\"primary\">Submit</Button>;\n\n//         }\n//         else{\n// addButt= <Button disabled>Submit</Button>;\n//         }\n//         return (\n\n//             <div className=\"center\" >\n\t  \n\t  \n\t \n//             <h1>Setup</h1>\n//             <label>{setUps[props.years]} </label>\n//             <br/>\n//             <p>{values[props.years][0]}</p>\n//             <div className=\"center\">\n//         {dropdown}\n//             </div>\n\t\t\t\n//             <br/><br/>\n\n\t\t\t\n\n// {addButt}            \n//             </div>\n//         );\n//         }\n//         else{\n\n//             return (\n//             <div className=\"center\">\n\n//             <h1>Year {Math.round((props.years-2)/4)}</h1>\n//             <h2>{listOfChoices[currChoice].myStatement}</h2>\n//             <label>{props.choices} </label>\n//             <ToggleButtonGroup vertical type=\"radio\" value={value} name=\"options\" onChange = {handleChange} >\n//             <ToggleButton value={0} onChange= {()=>{myChange(listOfChoices[currChoice].cost[value[0]]); myVar = updateSavings; myVarF = props.setSavings;}}>{listOfChoices[currChoice].options[0]}</ToggleButton>\n//             <ToggleButton value={1} onChange= {()=>{myChange(listOfChoices[currChoice].cost[value[0]]); myVar = updateSavings; myVarF = props.setSavings;}}>{listOfChoices[currChoice].options[1]}</ToggleButton>\n//             <ToggleButton value={2} onChange= {()=>{myChange(listOfChoices[currChoice].cost[value[0]]); myVar =updateSavings; myVarF = props.setSavings;}}>{listOfChoices[currChoice].options[2]}</ToggleButton>\n//             </ToggleButtonGroup>\n//             <br/><br/>\n//             <Button         aria-controls=\"example-collapse-text\"\n//             aria-expanded={open} onClick = {()=>{  if (props.years %2 ==0){setSalButtonC(true);}console.log(\"P\"+stockAddendum);props.handleFunc(myVar,myVarF,listOfChoices[currChoice].cost[value[0]]+parseInt(stockAddendum));props.handleFunc(props.years,props.setYears,1);setCurrChoice(Math.round(Math.random(4))) ;changeListOfStocks(Math.random()*50)}}>Submit</Button>\n//             <p>{props.savings}</p>\n\t\t\t\n\t\t\t\n// {salButton}            \n\t\t\t\n   \n\n//             </div>\n//             );\n//         }\n//     }","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\n\nexport default function Debts (props) {\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n\n  return (\n\t<div className=\"center\">\n\t\t<h1>Debts</h1>\n\n\t\t{\n\t\t\tuser.debts.map(debt => {\n\t\t\t\treturn (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h3>{debt.name}</h3>\n\t\t\t\t\t\t<h4>{debt.total}</h4>\n\t\t\t\t\t\t<h5>at {debt.interestRate*100}% APR</h5>\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t})\n\t\t}\n\t</div>\n  )\n}","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateSalary,updateSavings,updateAssets,updateCareer,updateInvestments,updateSkills,updateAssetsDebts,updateSavingsGoal } from '../../redux/actions/userActions';\n\n\nexport default function Skills (props) {\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n\n  // Calculation...\n  let visible = true;\n\n  return (\n\t<div className=\"center\">\n\t\tYour skills.\n{/* \t  Home. Custom home screen.\n\n\t  <Button \n\t\tvariant=\"success\" \n\t\tdisabled={salButtonC}\n\t\tonClick={()=>{\n\t\t  props.handleFunc(props.savings,props.setSavings,props.salary/4)\n\t\t}}>\n\t\t  Wait to collect salary\n\t  </Button>\n\t */}\n\t</div>\n  )\n}\n\n\n\n\n//         if (props.years < 2){\n//             let jobOptions = [\n//                 { value: 80000, label: 'Doctor'  },\n//                 { value: 60000, label: 'Engineer' },\n//                 { value: 50000, label: 'Cow Rancher'},\n//                 { value: 70000, label: 'Sky Diver'},\n//               ];\n\n//               const groupedOptions = [\n//                 {\n//                   label: 'Jobs',\n//                   options: jobOptions,\n//                 },\n\n//               ];\n//               const groupBadgeStyles = {\n//                 backgroundColor: '#EBECF0',\n//                 borderRadius: '2em',\n//                 color: '#172B4D',\n//                 display: 'inline-block',\n//                 fontSize: 12,\n//                 fontWeight: 'normal',\n//                 lineHeight: '1',\n//                 minWidth: 1,\n//                 padding: '0.16666666666667em 0.5em',\n//                 textAlign: 'center',\n//               };\n\t\t\t  \n\n//         let setUps = ['What is your job?','Whats your savings goal?','How much savings do you have?'];\n//         let dropdown;\n//         if (props.years == 0){\n//             dropdown = <Select\n//             defaultValue={jobOptions[1]}\n//             options={jobOptions}\n//             className=\"basic-single\"\n\t\t\t\n//             name=\"jobs\"\n//             onChange={(e)=>{handlemyVal(e)}}\n//           classNamePrefix=\"select\"\n//           />;\n//         }\n\t\t\n//         else{\n//             dropdown = <input \n//             name = {props.name[props.years]}\n//              min=\"1\"max=\"100\" type=\"number\"\n//               style = {{width:\"300px\"}}\n\n//               onChange= {(e)=>{handlemyVal(e.target);}}\n//               />\n//         }\n//         let addButt;\n//         if (activeButton == true){\n//             addButt =             <Button onClick = {()=>{setActiveButton(false);props.handleFunc(props.years,props.setYears,1); values[props.years][1](parseInt(myValue));setOpen(!open);}} variant=\"primary\">Submit</Button>;\n\n//         }\n//         else{\n// addButt= <Button disabled>Submit</Button>;\n//         }\n//         return (\n\n//             <div className=\"center\" >\n\t  \n\t  \n\t \n//             <h1>Setup</h1>\n//             <label>{setUps[props.years]} </label>\n//             <br/>\n//             <p>{values[props.years][0]}</p>\n//             <div className=\"center\">\n//         {dropdown}\n//             </div>\n\t\t\t\n//             <br/><br/>\n\n\t\t\t\n\n// {addButt}            \n//             </div>\n//         );\n//         }\n//         else{\n\n//             return (\n//             <div className=\"center\">\n\n//             <h1>Year {Math.round((props.years-2)/4)}</h1>\n//             <h2>{listOfChoices[currChoice].myStatement}</h2>\n//             <label>{props.choices} </label>\n//             <ToggleButtonGroup vertical type=\"radio\" value={value} name=\"options\" onChange = {handleChange} >\n//             <ToggleButton value={0} onChange= {()=>{myChange(listOfChoices[currChoice].cost[value[0]]); myVar = updateSavings; myVarF = props.setSavings;}}>{listOfChoices[currChoice].options[0]}</ToggleButton>\n//             <ToggleButton value={1} onChange= {()=>{myChange(listOfChoices[currChoice].cost[value[0]]); myVar = updateSavings; myVarF = props.setSavings;}}>{listOfChoices[currChoice].options[1]}</ToggleButton>\n//             <ToggleButton value={2} onChange= {()=>{myChange(listOfChoices[currChoice].cost[value[0]]); myVar =updateSavings; myVarF = props.setSavings;}}>{listOfChoices[currChoice].options[2]}</ToggleButton>\n//             </ToggleButtonGroup>\n//             <br/><br/>\n//             <Button         aria-controls=\"example-collapse-text\"\n//             aria-expanded={open} onClick = {()=>{  if (props.years %2 ==0){setSalButtonC(true);}console.log(\"P\"+stockAddendum);props.handleFunc(myVar,myVarF,listOfChoices[currChoice].cost[value[0]]+parseInt(stockAddendum));props.handleFunc(props.years,props.setYears,1);setCurrChoice(Math.round(Math.random(4))) ;changeListOfStocks(Math.random()*50)}}>Submit</Button>\n//             <p>{props.savings}</p>\n\t\t\t\n\t\t\t\n// {salButton}            \n\t\t\t\n   \n\n//             </div>\n//             );\n//         }\n//     }","import React, {useState} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport '../../styles/_slider.css';\nimport { updateShareSplit } from '../../redux/actions/userActions';\n \nexport default function BuyShares (props) {\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  let changeSlider = (event) =>{\n\n    dispatch(updateShareSplit(event.target.value))\n  }\n  return(\n  <div>\n    <p>Use the slider to indicate what percent of your income you'll use on the stock marker.</p>\n    <input type=\"range\"\n     className=\"custom-range\"\n      id=\"slider\"\n      max={100}\n      min={0}\n      defaultValue={user.investments.shareSplit}\n      onChange={(e)=>{changeSlider(e)}} />\n    \n  </div>\n  )\n}","import React, {useState} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport '../../styles/_slider.css';\nimport { updateMarkSharesSell } from '../../redux/actions/userActions';\n \nexport default function SellShares (props) {\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n\n  let changeSlider = (event) =>{\n\n    dispatch(updateMarkSharesSell(event.target.value))\n  }\n  return(\n  <div>\n    <p>Use the slider to indicate how much of your currently owned shares you'd like to sell.</p>\n    <input type=\"range\"\n     className=\"custom-range\"\n      id=\"slider\"\n      max={100}\n      min={0}\n      defaultValue={user.investments.sharesToSell}\n      onChange={(e)=>{changeSlider(e)}} />\n    \n  </div>\n  )\n}","import React, {useState} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport '../../styles/_slider.css';\nimport Slider from '@material-ui/core/Slider';\nimport { updateShareSplit } from '../../redux/actions/userActions';\n \nexport default function HoldShares (props) {\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n\n  return(\n  <div>\n    <p>You will maintain the current amount of shares for next turn.</p>\n\n  </div>\n  )\n}","import React, {useState} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateSavings, updateInvestSetting, updateSellingShares } from '../../redux/actions/userActions';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport Collapse from 'react-bootstrap/Collapse';\nimport BuyShares from '../modals/buyShares';\nimport SellShares from '../modals/sellShares';\nimport HoldShares from '../modals/holdShares';\n\n\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\n\n \nexport default function Invests (props) {\n\tconst user = useSelector(state => state.user);\n\tconst dispatch = useDispatch();\n\n  const [buySell, setBuySell] = useState('buy');\n\n\tlet sharesControl =()=>{\n\t\t\n\n\t\tswitch (buySell){\n\t\t\tcase 'buy':\n\n\t\t\t\t\treturn <BuyShares />;\n\t\t\tcase 'sell':\n\t\t\t\t\treturn <SellShares />;\n\t\t\tcase 'hold':\n\t\t\t\t\treturn <HoldShares />;\n\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t}\n}\n  const handleAlignment = (event) => {\n\t\tconsole.log(user.event);\n\t\tdispatch(updateInvestSetting(event));\n\n    setBuySell(event);\n  };\n\tconst data = [\n\t\t{\n\t\t\tname: user.event-4, pv: user.event-4<0 ? 0  : user.investments.history[user.event-4],\n\t\t},\n\t\t{\n\t\t\tname: user.event-3, pv: user.event-3<0 ? 0  : user.investments.history[user.event-3],\n\t\t},\n\t\t{\n\t\t\tname: user.event-2, pv: user.event-2<0 ? 0  : user.investments.history[user.event-2],\n\t\t},\n\t\t{\n\t\t\tname: user.event-1, pv: user.event-1<0 ? 0  : user.investments.history[user.event-1],\n\t\t},\n\t\t{\n\t\t\tname: user.event, pv: user.investments.history[user.event],\n\t\t},\n\t];\n\n\n\n\treturn (\n\t\t<div className=\"center\">\n\n\t\tYour shares: {user.investments.shares}\n\t\t<br></br>\n\t\t<p>Current value of investment: {user.investments.shares * user.investments.value}</p>\n\t\t<br></br>\n\t\t<p>Profit: {(user.investments.shares * user.investments.value)-user.investments.amountSpent}</p>\n\t\t<LineChart\n      width={500}\n      height={300}\n      data={data}\n      margin={{\n      top: 5, right: 30, left: 20, bottom: 5,\n      }}>\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"name\" />\n      <YAxis />\n      <Tooltip />\n      <Legend />\n      <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        </LineChart>\n\n\t\t<div id =\"align\">\n\t\t\t<>\n\t\t<ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue={user.investments.setting} onChange={(e)=>{handleAlignment(e)}}>\n    <ToggleButton variant=\"light\"value='buy'>Buy shares</ToggleButton>\n    <ToggleButton variant=\"light\"value='sell'>Sell shares</ToggleButton>\n    <ToggleButton variant=\"light\"value='hold'>Hold</ToggleButton>\n  \t</ToggleButtonGroup>\n\t\t</>\n\t\t{\n\t\t\tsharesControl()\n\t\t}\n\t\t</div>\n\t\t</div>\n\t)\n\n}","import React, { useState } from 'react';\n\nimport Home from './screens/home';\nimport Time from './screens/time';\nimport Assets from './screens/assets';\nimport Debts from './screens/debts';\nimport Skills from './screens/skills';\nimport Invests from './screens/invests';\n\nlet classNames = require('classnames');\n\nfunction Screen(props) {\n\n    let renderScreen = () =>{\n        switch (props.screen){\n            case \"home\":\n                return <Home />;\n            case \"time\":\n                return <Time/>;\n            case \"skills\":\n                return <Skills/>;\n            case \"debt\":\n                return <Debts/>;\n            case \"inventory\":\n                return <Assets/>;\n            case \"investments\":\n                return <Invests/>;\n            default:\n                return <Home />;\n        }\n    }\n\n    return (  \n        <div className={\"screen \" + props.screen}>\n            <h2 className=\"screen-text\">{props.screen}</h2>\n                {renderScreen()}\n            </div>\n\n         );\n    \n}\n\nexport default Screen;","import React, {useState} from 'react';\nimport { careers } from '../../gameInfo/careers'; \n\nimport { useDispatch } from 'react-redux';\nimport { selectCareer } from '../../redux/actions/userActions';\n\nimport \"../../styles/_choosecareer.css\";\n\nexport default function ChooseCareer () {\n\n    const [chosenCareer, setChosenCareer] = useState(\"doctor\");\n    const [careerDetails, setCareerDetails] = useState(careers[0]);\n\n    const dispatch = useDispatch();\n\n    function getCareer (name) {\n        return careers.find(career => career.name === name);\n    }\n\n    function onSelectChange (e) {\n        console.log(e.target.value);\n        setChosenCareer(e.target.value);\n        setCareerDetails(getCareer(e.target.value))\n    }\n\n    return (\n        <div className=\"screen\">\n            <div className=\"choice-body\">\n                <h3>Choose a Starting Career</h3>\n                <label htmlFor=\"career\">What career would you like to start with?</label>\n                <select \n                onChange={onSelectChange} \n                value={chosenCareer} \n                name=\"career\" \n                id=\"career\">\n                    {careers.map(career => {\n                        return <option value={career.name} label={career.name} />\n                    })}\n                </select>\n\n                <span> <h4>Starting Debt</h4> {careerDetails.debt.total} at {careerDetails.debt.interestRate*100} </span>\n                <span> <h4>Starting Salary</h4> {careerDetails.salaries[0]} </span>\n\n                <button onClick={() => dispatch(selectCareer(careerDetails))}>Choose This Career</button>\n            </div>\n        </div>\n    )\n}","import React, {useState} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './App.css';\nimport TabButton from './components/TabButton';\nimport TopBar from './components/topbar';\nimport Screen from './components/screen';\nimport ChooseCareer from './components/screens/chooseCareer';\n\nimport { useSelector } from 'react-redux';\n\n\nimport './styles/_main_colors.css';\n\nfunction App() {\n  \n  let [screenOn, setScreenOn] = useState(\"home\");\n  let [oldScreen, setOldScreenOn] = useState(\"home\");\n  let [years, setYears] =  useState(0);\n\n  const user = useSelector(state => state.user);\n  \n  let switchScreen = (screenName) => {\n    console.log(screenName);\n    setOldScreenOn(screenName);\n    setScreenOn(screenName);\n  }\n\n  let myT = () => {\n    console.log(\"L\");\n  }\n\n  function renderBody () {\n    if (user.unit === 0) {\n      return <ChooseCareer />\n    } else {\n      return         <Screen \n      screen={screenOn}\n      years = {years}\n      setYears={setYears}/>\n    }\n  }\n\n return(\n    <div className=\"app\">\n      <TopBar setScreen={setScreenOn}/>\n      <div id=\"game-body\">\n        {renderBody()}\n        <div id=\"side-bar\">\n          <TabButton disabled={user.unit === 0} className=\"side-tab\" tab=\"time\" onClick={()=>{switchScreen('time')}} />\n          <TabButton disabled={user.unit === 0} className=\"side-tab\" tab=\"skills\" onClick={()=>{switchScreen('skills')}} />\n          <TabButton disabled={user.unit === 0} className=\"side-tab\" tab=\"investments\" onClick={()=>{switchScreen('investments')}} />\n          <TabButton disabled={user.unit === 0} className=\"side-tab\" tab=\"debt\" onClick={()=>{switchScreen('debt')}} />\n          <TabButton disabled={user.unit === 0} className=\"side-tab\" tab=\"inventory\" onClick={()=>{switchScreen('inventory')}} />\n        </div>\n      </div>\n    </div>\n\n);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    UPDATE_SALARY,\n    UPDATE_SAVINGS,\n    UPDATE_ASSETS,\n    UPDATE_CAREER,\n    UPDATE_INVESTMENTS,\n    UPDATE_SKILLS,\n    UPDATE_ASSETS_DEBTS,\n    UPDATE_SAVINGS_GOAL,\n    UPDATE_SPIRIT,\n    PLAYER_MAKE_CHOICE,\n    FINISH_OUTCOME,\n    SELECT_CAREER,\n    UPDATE_SHARE_SPLIT,\n    UPDATE_INVEST_SETTING,\n    UPDATE_MARK_SHARES_SELL\n\n} from '../types';\n\nconst initialState = {\n    salary: 0,\n    career: \"no career\",\n    skills: {types: []},\n    savingsGoal: 0,\n    investments: {shares:0, amountSpent: 0,savings:1000,value:10,history:[10,8,8.50,9,10.5,9,12,13,8,20,15,16,17,18,10,8,7,5,8,8.50,9,10,11,15,12,18,20,21,22,28,21,20,20.50,18,30],shareSplit:30,setting:'buy',sharesToSell:0},\n    debts: [],\n    assets: [\n        {\n            name: \"Apartment\",\n            monthlyExpense: 1600,\n            percentageExpense: 0,\n\n        },\n        {\n            name: \"Transportation\",\n            monthlyExpense: 200,\n            percentageExpense: 0,\n\n\n        },\n        {\n            name: \"Food\",\n            monthlyExpense: 400,\n            percentageExpense: 0,\n\n        },\n        {\n            name: \"Taxes\",\n            percentageExpense: .40,\n            monthlyExpense: 0,\n\n        }\n    ],\n    spirit: 50,\n    lastChoice: {},\n\n    // \n    roundType: \"choice\", // choice or outcome\n    unit: 0, // Overall unit.\n    choice: 0, // Number of choice in a unit. \n    event: 0, // Index of event.\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n\n        case UPDATE_SHARE_SPLIT:\n            return {\n                ...state,\n                investments: {\n                ...state.investments,\n                shareSplit: action.payload,\n                },\n            }\n        case UPDATE_INVEST_SETTING:\n            return {\n                ...state,\n                investments: {\n                ...state.investments,\n                setting: action.switch,\n                },\n            }\n        case UPDATE_MARK_SHARES_SELL:\n            return {\n                ...state,\n                investments: {\n                ...state.investments,\n                sharesToSell: action.payload,\n                },\n            }\n        case UPDATE_SALARY:\n            return {\n                ...state,\n                salary: state.salary + action.payload,\n            }\n        case UPDATE_SAVINGS:\n            console.log(\"Update savings\", action.payload);\n            return {\n                ...state,\n                investments: {\n                    ...state.investments,\n                    savings: state.investments.savings + action.payload,\n                },\n            }\n            case UPDATE_SAVINGS_GOAL:\n                return {\n                    ...state,\n                    savingsGoal:state.investments.savingsGoal+action.payload,\n    \n                }\n        case UPDATE_ASSETS:\n            return {\n                ...state,\n                assets: state.assets.push(action.item),\n            }\n        case UPDATE_CAREER:\n            return {\n                ...state,\n                career: action.info,\n            }\n        case UPDATE_INVESTMENTS:\n            return {\n                ...state,\n                \n                investments: {\n                ...state.investments,\n                shares: state.investments.shares+action.invests, \n                savings:state.investments.savings,\n                },\n            }\n        case UPDATE_SKILLS:\n            return {\n                ...state,   \n                skills: state.skills.types.push(action.skill),\n            }\n\n        case UPDATE_SPIRIT:\n            return {\n                ...state,\n                spirit: Math.min(Math.max(state.spirit + action.payload, 0), 100),\n            }\n            \n        case UPDATE_ASSETS_DEBTS:\n\n            let newChange = [];\n            for (let i =0; i< state.assets.types.length;i++){\n                if (state.assets.types[i].debt > 0){\n                newChange.push(state.assets.types[i].debt -1);\n                }\n\n            }\n            return {\n                ...state,   \n                assets: newChange,\n            }\n        case PLAYER_MAKE_CHOICE:\n\n            function payExpenses(myValue){\n                let i = 0;\n                let currValue = myValue;\n                while (i < state.assets.length-1){\n                    console.log(state.assets[i]);\n                    if (currValue - state.assets[i].monthlyExpense > 0){\n                        currValue -= state.assets[i].monthlyExpense;\n                    }\n                \n                    if (currValue - myValue*state.assets[i].percentageExpense > 0){\n                        currValue -= state.assets[i].percentageExpense;\n                    }\n                    i++;\n                }\n                return currValue\n            }\n            let newIncome = action.choice.outcome.cash;\n\n            let addFromSale=0;\n            let sharesAdd= 0;\n            let prev =0;\n            let asset = action.choice.outcome.asset;\n            if (newIncome >0){\n                console.log(\"P\"+state.investments.setting);\n\n                if (state.investments.setting ==='sell'){\n\n                    addFromSale = (state.investments.shares*(state.investments.sharesToSell/100)) * state.investments.value;\n                }\n                else if (state.investments.setting ==='buy'){\n\n                    sharesAdd = ((newIncome * (state.investments.shareSplit/100))/state.investments.value);\n                }\n                prev = newIncome * (1-(state.investments.shareSplit/100))\n            }\n            let newAssets = state.assets;\n            if (action.asset !== undefined){\n                newAssets.push(action.asset);\n            }\n            addFromSale = payExpenses(prev);\n            return {\n                ...state,\n                lastChoice: action.choice,\n                roundType: \"outcome\",\n                event: state.event + 1,\n                investments: {\n                    ...state.investments,\n                    amountSpent:state.investments.amountSpent + (newIncome * (state.investments.shareSplit/100)),\n                    shares: state.investments.shares + sharesAdd,\n                    savings: state.investments.savings + addFromSale,\n                    value:state.investments.history[state.event+1],\n                },\n                assets: newAssets,\n            }\n        case FINISH_OUTCOME:\n\n            // TODO: Apply Expenses from assets.\n            // TODO: Increase Salary\n            // TODO: Increment Debts\n\n\n            return {\n\n                ...state,\n                \n                roundType: \"choice\",\n\n                \n            }\n        case SELECT_CAREER:\n            return {\n                ...state,\n                career: action.payload,\n                debts: state.debts.concat(action.payload.debt),\n                salary: action.payload.salaries[0],\n                unit: 1,\n            }\n        default:\n            return state;\n        }\n\n    }\n\n    \n\n","import {\n    UPDATE_SALARY,\n} from '../types';\n\nconst initialState = {\n    elementsLoading: {},\n}\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case UPDATE_SALARY:\n            return {\n                ...state,\n                elementsLoading: {...state.elementsLoading, salary: true}\n            }\n        default:\n            return state;\n        }\n    }\n\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\n\nimport userReducer from './reducers/userReducer';\nimport uiReducer from './reducers/uiReducer';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst reducers = combineReducers({\n    user: userReducer,\n    UI: uiReducer,\n});\n\n// Compose devtools if we have the extension.\nconst store = window.__REDUX_DEVTOOLS_EXTENSION__ ? \n    createStore(reducers, initialState, compose(applyMiddleware(...middleware), window.__REDUX_DEVTOOLS_EXTENSION__())) :\n    createStore(reducers, initialState, compose(applyMiddleware(...middleware)));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport * as serviceWorker from './serviceWorker';\n\n// Redux\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\n\nlet doctor = {\n    name: \"Doctor\",\n    salaries: [\n        140000,\n        180000,\n        240000\n    ],\n    debt: { total: 400000, interestRate: .06, name: \"Medical School\"},\n    skills: [\n        \"science\",\n        \"communication\",\n        \"dexterity\"\n    ],\n    certification: \"doctor\",\n    requiredCertification: \"doctor\"\n}\n\nlet programmer = {\n    name: \"Programmer\",\n    salaries: [\n        60000,\n        90000,\n        120000,\n        160000\n    ],\n    debt: { total: 140000, interestRate: .06, name: \"University Loans\" },\n    skills: [\n        \"science\",\n        \"communication\",\n        \"dexterity\"\n    ],\n    certification: \"programmer\"\n}\n\nlet construction = {\n    name: \"Construction Worker\",\n    salaries: [\n        45000,\n        65000,\n        80000,\n        100000\n    ],\n    debt: { total: 0, interestRate: .00 },\n    skills: [\n        \"management\",\n        \"dexterity\",\n        \"endurance\"\n    ]\n}\n\nexports.careers = [doctor, programmer, construction];","\n\nlet outWithFriends = {\n  name: \"out-with-friends\",\n  required: () => true,\n  branches: [\n    {\n      title: \"Want to go out?\",\n      description: \"Your friends want to go out! What will you do tonight?\",\n      type: \"action\",\n      choices: [\n        {\n          title: \"Stay In\",\n          outcome: {\n            spirit: -2,\n            cash: 100,\n            description: \"A lonely night in. You saved some cash but you miss your friends.\",\n          }\n        },\n        {\n          title: \"Go Out\",\n          outcome: {\n            cash: -60,\n            spirit: +1,\n            description: \"You had a great time! Wallet feels a little lighter though...\",\n          }\n        },\n        {\n          title: \"Buy a Round!\",\n          outcome: {\n            cash: -120,\n            spirit: +2,\n            description: \"You were the life of the party! How much did those wings cost?\",\n          }\n        }\n      ]\n    }\n  ]\n}\n\nexports.events = [\n  outWithFriends\n]"],"sourceRoot":""}